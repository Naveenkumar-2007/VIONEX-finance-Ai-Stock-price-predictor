name: CI/CD Pipeline - Stock Predictor

# Trigger workflow on push to main or pull requests
on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run daily at 2 AM UTC to retrain models
    - cron: '0 2 * * *'
  workflow_dispatch:  # Allow manual trigger

env:
  PYTHON_VERSION: '3.10'
  DOCKER_IMAGE: vionex-stock-predictor
  
jobs:
  # ===== JOB 1: CODE QUALITY & TESTING =====
  test:
    name: Test & Lint
    runs-on: ubuntu-latest
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Full history for DVC
      
      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: üì¶ Install Dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-cov flake8 black
      
      - name: üîç Code Linting (Flake8)
        run: |
          # Stop build if there are Python syntax errors
          flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
          # Check code quality (warnings only)
          flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        continue-on-error: true
      
      - name: üé® Code Formatting Check (Black)
        run: |
          black --check --diff .
        continue-on-error: true
      
      - name: üß™ Run Unit Tests
        run: |
          pytest mlops/test_mlops.py -v --cov=src --cov=mlops --cov-report=xml --cov-report=html
      
      - name: üìä Upload Coverage Report
        uses: codecov/codecov-action@v3
        with:
          files: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
        continue-on-error: true

  # ===== JOB 2: DVC PIPELINE & MODEL TRAINING =====
  train:
    name: Train ML Models
    runs-on: ubuntu-latest
    needs: test
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      
      - name: üêç Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: ${{ env.PYTHON_VERSION }}
          cache: 'pip'
      
      - name: üì¶ Install Dependencies
        run: |
          pip install -r requirements.txt
          pip install dvc[gdrive]
      
      - name: üîß Setup DVC
        env:
          GDRIVE_CREDENTIALS_DATA: ${{ secrets.GDRIVE_CREDENTIALS_DATA }}
        run: |
          dvc remote modify myremote gdrive_use_service_account true
          # dvc pull  # Uncomment to pull existing models
      
      - name: üöÄ Run DVC Pipeline
        run: |
          dvc repro
      
      - name: üì§ Push to DVC Remote
        run: |
          dvc push
        continue-on-error: true
      
      - name: üíæ Upload Model Artifacts
        uses: actions/upload-artifact@v3
        with:
          name: trained-models
          path: |
            artifacts/*.h5
            artifacts/*.pkl
            mlops/model_registry/
          retention-days: 30
      
      - name: üìà Generate DVC Metrics Report
        run: |
          dvc metrics show --md >> $GITHUB_STEP_SUMMARY
          dvc plots diff --targets artifacts/training_history.csv -o plots/
        continue-on-error: true

  # ===== JOB 3: BUILD DOCKER IMAGE =====
  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: train
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v3
      
      - name: üì• Download Model Artifacts
        uses: actions/download-artifact@v3
        with:
          name: trained-models
          path: artifacts/
      
      - name: üêã Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      
      - name: üîê Login to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
        continue-on-error: true
      
      - name: üèóÔ∏è Build and Push Docker Image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: ${{ github.ref == 'refs/heads/main' }}
          tags: |
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:latest
            ${{ secrets.DOCKER_USERNAME }}/${{ env.DOCKER_IMAGE }}:${{ github.sha }}
          cache-from: type=gha
          cache-to: type=gha,mode=max

  # ===== JOB 4: DEPLOY TO PRODUCTION =====
  deploy:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: build
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: üì• Checkout Code
        uses: actions/checkout@v3
      
      - name: üì• Download Model Artifacts
        uses: actions/download-artifact@v3
        with:
          name: trained-models
          path: artifacts/
      
      # Deploy to Heroku
      - name: üöÄ Deploy to Heroku
        uses: akhileshns/heroku-deploy@v3.12.14
        with:
          heroku_api_key: ${{ secrets.HEROKU_API_KEY }}
          heroku_app_name: ${{ secrets.HEROKU_APP_NAME }}
          heroku_email: ${{ secrets.HEROKU_EMAIL }}
          usedocker: false
        continue-on-error: true
      
      # Alternative: Deploy to AWS EC2
      - name: üåê Deploy to AWS EC2
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          EC2_HOST: ${{ secrets.EC2_HOST }}
          EC2_USER: ${{ secrets.EC2_USER }}
          EC2_KEY: ${{ secrets.EC2_SSH_KEY }}
        run: |
          echo "Deploying to AWS EC2..."
          # bash scripts/deploy_to_aws.sh
        continue-on-error: true
      
      # Alternative: Deploy to Railway
      - name: üöÇ Deploy to Railway
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
        run: |
          npm install -g @railway/cli
          railway up
        continue-on-error: true
      
      - name: ‚úÖ Deployment Summary
        run: |
          echo "### üéâ Deployment Successful!" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "- **Branch:** ${{ github.ref }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Commit:** ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Deployed at:** $(date)" >> $GITHUB_STEP_SUMMARY

  # ===== JOB 5: HEALTH CHECK =====
  health-check:
    name: Health Check
    runs-on: ubuntu-latest
    needs: deploy
    if: github.ref == 'refs/heads/main'
    
    steps:
      - name: üè• Check Application Health
        run: |
          sleep 60  # Wait for deployment
          curl -f https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com/ || exit 1
          echo "‚úÖ Application is healthy!"
        continue-on-error: true
      
      - name: üß™ Test API Endpoint
        run: |
          response=$(curl -s https://${{ secrets.HEROKU_APP_NAME }}.herokuapp.com/api/stock_data/AAPL)
          echo $response | jq .
          if [ $(echo $response | jq -r '.success') == "true" ]; then
            echo "‚úÖ API is working!"
          else
            echo "‚ùå API test failed!"
            exit 1
          fi
        continue-on-error: true
